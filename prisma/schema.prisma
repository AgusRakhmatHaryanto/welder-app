// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  dev
  admin
  customer
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SHIPPED
  CANCELLED
}

enum InstallationStatus {
  NOT_APPLICABLE
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
}

// Model User
model User {
  id          String         @unique @default(uuid()) @db.VarChar(36)
  username    String?        @db.VarChar(255)
  name        String?        @db.VarChar(255)
  email       String         @unique @db.VarChar(100)
  password    String         @db.VarChar(100)
  phone       String?        @db.VarChar(50)
  address     String?        @db.Text()
  postalCode  String?        @db.VarChar(15)
  city        String?        @db.VarChar(100)
  province    String?        @db.VarChar(100)
  profile     String?        @db.VarChar(150)
  role        Role           @default(customer)
  isVerified  Boolean        @default(false)
  verifyToken String?        @db.VarChar(255)
  createdAt   DateTime       @default(now()) @db.Timestamp(6)
  updatedAt   DateTime       @updatedAt @db.Timestamp(6)
  token       RefreshToken[]
  order       Order[]
  Review      Review[]
}

// Model RefreshToken
model RefreshToken {
  // id        String   @unique @default(uuid()) @db.VarChar(36)
  token     String   @unique @db.VarChar(150)
  userId    String?  @unique @db.VarChar(36)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  user      User?    @relation(fields: [userId], references: [id])
}

model Progress {
  id          String    @unique @default(uuid()) @db.VarChar(36)
  description String?   @db.Text()
  orderItemId String    @unique @db.VarChar(36)
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  description String?  @db.Text()
  productId   String   @unique @db.VarChar(36)
  userId      String   @unique @db.VarChar(36)
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model Category
model Category {
  id        String            @unique @default(uuid()) @db.VarChar(36)
  name      String            @unique @db.VarChar(100)
  product   ProductCategory[]
  createdAt DateTime          @default(now()) @db.Timestamp(6)
  updatedAt DateTime          @updatedAt @db.Timestamp(6)
}

model ProductCategory {
  productId  String
  categoryId String
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  Category   Category @relation(fields: [categoryId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

// Model Product
model Product {
  id             String            @unique @default(uuid()) @db.VarChar(36)
  name           String?           @db.VarChar(255)
  description    String?           @db.Text()
  richDesription String?           @db.Text()
  image          String?           @db.VarChar(150)
  images         String[]          @default([])
  price          Float?            @default(0)
  categories     ProductCategory[]
  countInStock   Int?              @default(0)
  createdAt      DateTime          @default(now()) @db.Timestamp(6)
  updatedAt      DateTime          @updatedAt @db.Timestamp(6)
  orderItem      OrderItem[]
  Review         Review[]
}

model Order {
  id            String             @unique @default(uuid()) @db.VarChar(36)
  status        OrderStatus        @default(PENDING)
  instalation   InstallationStatus @default(NOT_APPLICABLE)
  paymentStatus PaymentStatus      @default(PENDING)
  totalPrice    Float?             @default(0)
  userId        String?            @unique @db.VarChar(36)
  createdAt     DateTime           @default(now()) @db.Timestamp(6)
  updatedAt     DateTime           @updatedAt @db.Timestamp(6)
  user          User?              @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String     @unique @default(uuid()) @db.VarChar(36)
  quantity  Int        @default(0)
  order     Order?     @relation(fields: [orderId], references: [id])
  orderId   String?    @unique @db.VarChar(36)
  productId String?    @unique @db.VarChar(36)
  product   Product?   @relation(fields: [productId], references: [id])
  Progress  Progress[]
}
